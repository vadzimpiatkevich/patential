apiVersion: v1
kind: Service
metadata:
  name: portal
  labels:
    app: portal
spec:
  type: LoadBalancer
  selector:
    app: portal
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
      name: http-port
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portal
  labels:
    app: portal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portal
  revisionHistoryLimit: 1
  template:
    metadata:
      labels:
        app: portal
    spec:
      containers:
      - name: portal
        image: gcr.io/patential/portal
        command: ["rails"]
        args: ["s"]
        ports:
        - containerPort: 3000
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 200m
            memory: 512Mi
        env:
        - name: RAILS_ENV
          value: "production"
        - name: RAILS_SERVE_STATIC_FILES
          value: "true"
        - name: "RAILS_LOG_TO_STDOUT"
          value: "true"
        - name: "PATENT_SVC_HOST"
          value: "patent:9000"
        - name: DB_HOST
          value: "127.0.0.1"
        - name: DB_PORT
          value: "5432"
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: psql-instance-credentials
              key: user
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: psql-instance-credentials
              key: password
        - name: DB_NAME
          value: "portal"
      - name: cloudsql-proxy
        image: gcr.io/cloudsql-docker/gce-proxy:1.14
        command: [
          "/cloud_sql_proxy",
          "-instances=patential:europe-west3:psql-europe-west3=tcp:5432",
          # If running on a VPC, the Cloud SQL proxy can connect via Private IP. See:
          # https://cloud.google.com/sql/docs/mysql/private-ip for more info.
          # "-ip_address_types=PRIVATE",
          "-credential_file=/secrets/cloudsql/patential-963da9ab3326.json"
        ]
        securityContext:
          runAsUser: 2 # non-root user.
          allowPrivilegeEscalation: false
        volumeMounts:
        - name: cloudsql-instance-credentials
          mountPath: /secrets/cloudsql
          readOnly: true
      volumes:
      - name: cloudsql-instance-credentials
        secret:
          secretName: cloudsql-instance-credentials
