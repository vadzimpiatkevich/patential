// Code generated by protoc-gen-go. DO NOT EDIT.
// source: go/svc/patent/proto/service/service.proto

package patent

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Patent struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ApplicationNumber    string               `protobuf:"bytes,2,opt,name=application_number,json=applicationNumber,proto3" json:"application_number,omitempty"`
	ApplicationKind      string               `protobuf:"bytes,3,opt,name=application_kind,json=applicationKind,proto3" json:"application_kind,omitempty"`
	GrantDate            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=grant_date,json=grantDate,proto3" json:"grant_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Patent) Reset()         { *m = Patent{} }
func (m *Patent) String() string { return proto.CompactTextString(m) }
func (*Patent) ProtoMessage()    {}
func (*Patent) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc9158c080625e5e, []int{0}
}

func (m *Patent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Patent.Unmarshal(m, b)
}
func (m *Patent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Patent.Marshal(b, m, deterministic)
}
func (m *Patent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Patent.Merge(m, src)
}
func (m *Patent) XXX_Size() int {
	return xxx_messageInfo_Patent.Size(m)
}
func (m *Patent) XXX_DiscardUnknown() {
	xxx_messageInfo_Patent.DiscardUnknown(m)
}

var xxx_messageInfo_Patent proto.InternalMessageInfo

func (m *Patent) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Patent) GetApplicationNumber() string {
	if m != nil {
		return m.ApplicationNumber
	}
	return ""
}

func (m *Patent) GetApplicationKind() string {
	if m != nil {
		return m.ApplicationKind
	}
	return ""
}

func (m *Patent) GetGrantDate() *timestamp.Timestamp {
	if m != nil {
		return m.GrantDate
	}
	return nil
}

type ListPatentsRequest struct {
	Pagination           *Pagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ListPatentsRequest) Reset()         { *m = ListPatentsRequest{} }
func (m *ListPatentsRequest) String() string { return proto.CompactTextString(m) }
func (*ListPatentsRequest) ProtoMessage()    {}
func (*ListPatentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc9158c080625e5e, []int{1}
}

func (m *ListPatentsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatentsRequest.Unmarshal(m, b)
}
func (m *ListPatentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatentsRequest.Marshal(b, m, deterministic)
}
func (m *ListPatentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatentsRequest.Merge(m, src)
}
func (m *ListPatentsRequest) XXX_Size() int {
	return xxx_messageInfo_ListPatentsRequest.Size(m)
}
func (m *ListPatentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatentsRequest proto.InternalMessageInfo

func (m *ListPatentsRequest) GetPagination() *Pagination {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ListPatentsResponse struct {
	Patents              []*Patent `protobuf:"bytes,1,rep,name=patents,proto3" json:"patents,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ListPatentsResponse) Reset()         { *m = ListPatentsResponse{} }
func (m *ListPatentsResponse) String() string { return proto.CompactTextString(m) }
func (*ListPatentsResponse) ProtoMessage()    {}
func (*ListPatentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc9158c080625e5e, []int{2}
}

func (m *ListPatentsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListPatentsResponse.Unmarshal(m, b)
}
func (m *ListPatentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListPatentsResponse.Marshal(b, m, deterministic)
}
func (m *ListPatentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPatentsResponse.Merge(m, src)
}
func (m *ListPatentsResponse) XXX_Size() int {
	return xxx_messageInfo_ListPatentsResponse.Size(m)
}
func (m *ListPatentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPatentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPatentsResponse proto.InternalMessageInfo

func (m *ListPatentsResponse) GetPatents() []*Patent {
	if m != nil {
		return m.Patents
	}
	return nil
}

type Pagination struct {
	Offset               int32    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32    `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pagination) Reset()         { *m = Pagination{} }
func (m *Pagination) String() string { return proto.CompactTextString(m) }
func (*Pagination) ProtoMessage()    {}
func (*Pagination) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc9158c080625e5e, []int{3}
}

func (m *Pagination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pagination.Unmarshal(m, b)
}
func (m *Pagination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pagination.Marshal(b, m, deterministic)
}
func (m *Pagination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pagination.Merge(m, src)
}
func (m *Pagination) XXX_Size() int {
	return xxx_messageInfo_Pagination.Size(m)
}
func (m *Pagination) XXX_DiscardUnknown() {
	xxx_messageInfo_Pagination.DiscardUnknown(m)
}

var xxx_messageInfo_Pagination proto.InternalMessageInfo

func (m *Pagination) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Pagination) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*Patent)(nil), "patent.Patent")
	proto.RegisterType((*ListPatentsRequest)(nil), "patent.ListPatentsRequest")
	proto.RegisterType((*ListPatentsResponse)(nil), "patent.ListPatentsResponse")
	proto.RegisterType((*Pagination)(nil), "patent.Pagination")
}

func init() {
	proto.RegisterFile("go/svc/patent/proto/service/service.proto", fileDescriptor_bc9158c080625e5e)
}

var fileDescriptor_bc9158c080625e5e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0x86, 0x95, 0x76, 0x9b, 0xaa, 0x13, 0xa9, 0xbb, 0x3b, 0xbb, 0x42, 0x51, 0x38, 0x50, 0xe5,
	0x94, 0x1e, 0x48, 0xa4, 0x70, 0x82, 0x0b, 0x17, 0x84, 0x90, 0x40, 0xa8, 0x18, 0xee, 0x95, 0xdb,
	0xb8, 0x91, 0x45, 0x63, 0x9b, 0x78, 0xda, 0xb7, 0xe2, 0x1d, 0x11, 0x36, 0xa1, 0x41, 0x70, 0x1a,
	0xcd, 0xfc, 0x9f, 0x67, 0xfe, 0x19, 0xc3, 0xbc, 0xd6, 0x85, 0xdd, 0xaf, 0x0b, 0xc3, 0x49, 0x28,
	0x2a, 0x4c, 0xab, 0x49, 0x17, 0x56, 0xb4, 0x7b, 0xb9, 0x16, 0x5d, 0xcc, 0x5d, 0x15, 0x43, 0xcf,
	0x24, 0x27, 0xb5, 0xd6, 0xf5, 0x56, 0x78, 0x76, 0xb5, 0xdb, 0x14, 0x24, 0x1b, 0x61, 0x89, 0x37,
	0xc6, 0x83, 0xe9, 0x6b, 0x00, 0xe1, 0xc2, 0xb1, 0x38, 0x85, 0x81, 0xac, 0xe2, 0x60, 0x16, 0x64,
	0x13, 0x36, 0x90, 0x15, 0x9e, 0x02, 0x72, 0x63, 0xb6, 0x72, 0xcd, 0x49, 0x6a, 0xb5, 0x54, 0xbb,
	0x66, 0x25, 0xda, 0x78, 0xe0, 0xf4, 0xbf, 0x3d, 0xe5, 0xde, 0x09, 0x38, 0x87, 0x3f, 0x7d, 0xfc,
	0x59, 0xaa, 0x2a, 0x1e, 0x3a, 0xf8, 0x77, 0xaf, 0x7e, 0x2b, 0x55, 0x85, 0xe7, 0x00, 0x75, 0xcb,
	0x15, 0x2d, 0x2b, 0x4e, 0x22, 0xfe, 0x35, 0x0b, 0xb2, 0xa8, 0x4c, 0x72, 0x6f, 0x35, 0xef, 0xac,
	0xe6, 0x4f, 0x9d, 0x55, 0x36, 0x71, 0xf4, 0x15, 0x27, 0x91, 0xde, 0x00, 0xde, 0x49, 0x4b, 0xde,
	0xb2, 0x65, 0xe2, 0x65, 0x27, 0x2c, 0x61, 0x09, 0x60, 0x78, 0x2d, 0x95, 0x1b, 0xe1, 0x56, 0x88,
	0x4a, 0xcc, 0xfd, 0x0d, 0xf2, 0xc5, 0xa7, 0xc2, 0x7a, 0x54, 0x7a, 0x09, 0xff, 0xbe, 0x74, 0xb2,
	0x46, 0x2b, 0x2b, 0x30, 0x83, 0xb1, 0x7f, 0x67, 0xe3, 0x60, 0x36, 0xcc, 0xa2, 0x72, 0x7a, 0xe8,
	0xf3, 0x1e, 0x58, 0x27, 0xa7, 0x17, 0x00, 0x87, 0xd6, 0x78, 0x04, 0xa1, 0xde, 0x6c, 0xac, 0x20,
	0x37, 0x7e, 0xc4, 0x3e, 0x32, 0xfc, 0x0f, 0xa3, 0xad, 0x6c, 0x24, 0xb9, 0xc3, 0x8d, 0x98, 0x4f,
	0xca, 0x07, 0x18, 0x3f, 0xfa, 0x0f, 0xc3, 0x6b, 0x88, 0x7a, 0x3e, 0x30, 0xe9, 0xc6, 0x7d, 0x5f,
	0x33, 0x39, 0xfe, 0x51, 0xf3, 0xc6, 0x57, 0xa1, 0x3b, 0xdc, 0xd9, 0x5b, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x78, 0x6d, 0x40, 0x94, 0x26, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServiceClient interface {
	ListPatents(ctx context.Context, in *ListPatentsRequest, opts ...grpc.CallOption) (*ListPatentsResponse, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) ListPatents(ctx context.Context, in *ListPatentsRequest, opts ...grpc.CallOption) (*ListPatentsResponse, error) {
	out := new(ListPatentsResponse)
	err := c.cc.Invoke(ctx, "/patent.Service/ListPatents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
type ServiceServer interface {
	ListPatents(context.Context, *ListPatentsRequest) (*ListPatentsResponse, error)
}

// UnimplementedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (*UnimplementedServiceServer) ListPatents(ctx context.Context, req *ListPatentsRequest) (*ListPatentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPatents not implemented")
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_ListPatents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPatentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListPatents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/patent.Service/ListPatents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListPatents(ctx, req.(*ListPatentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "patent.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPatents",
			Handler:    _Service_ListPatents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go/svc/patent/proto/service/service.proto",
}
